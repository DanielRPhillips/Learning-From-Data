Traceback (most recent call last):
  File "/Users/furnstah/opt/anaconda3/envs/asymptotic-emulator-env/lib/python3.9/site-packages/jupyter_cache/executors/utils.py", line 51, in single_nb_execution
    executenb(
  File "/Users/furnstah/opt/anaconda3/envs/asymptotic-emulator-env/lib/python3.9/site-packages/nbclient/client.py", line 1112, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/Users/furnstah/opt/anaconda3/envs/asymptotic-emulator-env/lib/python3.9/site-packages/nbclient/util.py", line 74, in wrapped
    return just_run(coro(*args, **kwargs))
  File "/Users/furnstah/opt/anaconda3/envs/asymptotic-emulator-env/lib/python3.9/site-packages/nbclient/util.py", line 53, in just_run
    return loop.run_until_complete(coro)
  File "/Users/furnstah/opt/anaconda3/envs/asymptotic-emulator-env/lib/python3.9/asyncio/base_events.py", line 642, in run_until_complete
    return future.result()
  File "/Users/furnstah/opt/anaconda3/envs/asymptotic-emulator-env/lib/python3.9/site-packages/nbclient/client.py", line 553, in async_execute
    await self.async_execute_cell(
  File "/Users/furnstah/opt/anaconda3/envs/asymptotic-emulator-env/lib/python3.9/site-packages/nbclient/client.py", line 857, in async_execute_cell
    self._check_raise_for_error(cell, exec_reply)
  File "/Users/furnstah/opt/anaconda3/envs/asymptotic-emulator-env/lib/python3.9/site-packages/nbclient/client.py", line 760, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
# True location of the radioactive source
x0_true = 1.
y0_true = 1.

# Generate num_pts random numbers distributed according to dist and plot 
num_pts = 512
x_pts = np.arange(num_pts)

# Uniform distribution in theta: uniform(a,b) in [a, a+b]
theta_dist = uniform(-np.pi/2., np.pi)

#dist_pts_alt = ### Fill in formula here for x_k points

        
# Make some plots!
fig = plt.figure(figsize=(15,5))

# First plot all the points, letting it autoscale the counts
ax_1 = fig.add_subplot(1,3,1)
ax_1.scatter(x_pts, dist_pts_alt)  

# Repeat but zoom in to near the origin
ax_2 = fig.add_subplot(1,3,2)
ax_2.scatter(x_pts, dist_pts_alt)
ax_2.set_ylim(-10.,10.)

# Finally make a zoomed-in histogram
ax_3 = fig.add_subplot(1,3,3)
out = ax_3.hist(dist_pts_alt, bins=np.arange(-10., 10., 0.2))

# Print out the numerical limits (max and min)
print('maximum = ', np.amax(dist_pts_alt))
print('minimum = ', np.amin(dist_pts_alt))

fig.tight_layout()
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mNameError[0m                                 Traceback (most recent call last)
[0;32m<ipython-input-3-6a02dc0f8122>[0m in [0;36m<module>[0;34m[0m
[1;32m     18[0m [0;31m# First plot all the points, letting it autoscale the counts[0m[0;34m[0m[0;34m[0m[0;34m[0m[0m
[1;32m     19[0m [0max_1[0m [0;34m=[0m [0mfig[0m[0;34m.[0m[0madd_subplot[0m[0;34m([0m[0;36m1[0m[0;34m,[0m[0;36m3[0m[0;34m,[0m[0;36m1[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0;32m---> 20[0;31m [0max_1[0m[0;34m.[0m[0mscatter[0m[0;34m([0m[0mx_pts[0m[0;34m,[0m [0mdist_pts_alt[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m     21[0m [0;34m[0m[0m
[1;32m     22[0m [0;31m# Repeat but zoom in to near the origin[0m[0;34m[0m[0;34m[0m[0;34m[0m[0m

[0;31mNameError[0m: name 'dist_pts_alt' is not defined
NameError: name 'dist_pts_alt' is not defined

